# -*- coding: utf-8 -*-
"""Practica_EDE_Hiperestatica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zK0wWTpvqgiZc6VnGNwniARSLF4hWQnV

**EDE - Viga hiperest치tica**
"""

from sympy import SingularityFunction,symbols,Function,factorial,integrate
import matplotlib.pyplot as plt
import numpy as np
from sympy.plotting import plot
from sympy import init_printing
from sympy import *
from IPython.display import display, Math
from anastruct import Steel_profiles
import pandas as pd
import numpy as np
from anastruct import SystemElements
import collections
collections.Iterable = collections.abc.Iterable


cross_section = Steel_profiles()
sel_profile = cross_section.IPE_profiles[cross_section.IPE_profiles['Perfil'] == 'IPE-180']
I = float(sel_profile['Iy']*1E-8)
Wy = float(sel_profile['Wy']*1E+3)
A = float(sel_profile['A']*1E+2)
hp = float(sel_profile['h'])
tw = float(sel_profile['tw'])
Av = hp*tw
print('Wy = ' + str(float(sel_profile['Wy']*1E+4)))
EI = 2.1E+11*I

gamma_G = 1.00
gamma_Q = 1.00
Q = gamma_G*(3+1)+gamma_Q*2
Q = Q*1E+3

Rf = Q*3/2*3/2


ss = SystemElements()

# A침adimos elementos
ss.add_element(location=[[0.0, 0.0], [2.0,0.0]], EI= EI)
ss.add_element(location=[[2.0, 0.0], [5.0,0.0]], EI= EI)


# A침adimos cargas
ss.q_load(element_id=1, q=(Q*3/2,Q*3/2+Q*3/2), q_perp=(0,0))
ss.q_load(element_id=2, q=Q*3/2)
ss.point_load(2, Fx=0, Fy=-Rf)

# A침adimos condiciones de borde
ss.add_support_hinged(node_id=1)
ss.add_support_hinged(node_id=3)       

# Mostramos estructura generada
ss.show_structure()

# Resolvemos la estructura
ss.solve()

# Mostramos las reacciones
ss.show_reaction_force()

# Mostramos flectores
ss.show_bending_moment()

# Mostramos cortantes
ss.show_shear_force()

ss.show_displacement(factor = 100)


resultados = ss.get_element_results(0)
resultados = pd.DataFrame(resultados)
Mdmax = np.max(np.array([resultados['Mmax'].abs().max(),resultados['Mmin'].abs().max()]))

Mdmax*1E+3/Wy

sigma_n = 70.6*1E+6/Wy
tau = 14.38*1E+3/Av
sigma_co = np.sqrt(sigma_n**2+3*tau**3)